.TH "afcgi.h" 3 "25 Nov 2008" "Version 0" "events" \" -*- nroff -*-
.ad l
.nh
.SH NAME
afcgi.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdint.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <events.h>\fP
.br
\fC#include <rotbuffer.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBafcgi_hdr\fP"
.br
.ti -1c
.RI "struct \fBafcgi_sess\fP"
.br
.ti -1c
.RI "struct \fBafcgi\fP"
.br
.ti -1c
.RI "struct \fBafcgi_binder\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBafcgi_set_callback\fP(sess, name, cb)   afcgi_set_cb_ ## name(sess, cb)"
.br
.ti -1c
.RI "#define \fBLOG_EMERG\fP   0"
.br
.ti -1c
.RI "#define \fBLOG_ALERT\fP   1"
.br
.ti -1c
.RI "#define \fBLOG_CRIT\fP   2"
.br
.ti -1c
.RI "#define \fBLOG_ERR\fP   3"
.br
.ti -1c
.RI "#define \fBLOG_WARNING\fP   4"
.br
.ti -1c
.RI "#define \fBLOG_NOTICE\fP   5"
.br
.ti -1c
.RI "#define \fBLOG_INFO\fP   6"
.br
.ti -1c
.RI "#define \fBLOG_DEBUG\fP   7"
.br
.ti -1c
.RI "#define \fBAFCGI_MAX_LOG_LEVEL\fP   LOG_WARNING"
.br
.ti -1c
.RI "#define \fBafcgi_logmsg\fP(priority, fmt, args...)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(*) \fBafcgi_cb\fP (struct afcgi_sess *s, void *arg)"
.br
.ti -1c
.RI "typedef void(*) \fBafcgi_cb_data\fP (struct afcgi_sess *s, void *arg, int len)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBafcgi_callback_names\fP { \fBON_HEADERS\fP =  0, \fBON_RECEIVE\fP, \fBON_DATA_RECV\fP, \fBON_RUN\fP, \fBON_END_OF_DATA\fP, \fBON_WRITE\fP, \fBON_ABORT\fP }"
.br
.ti -1c
.RI "enum \fBafcgi_return_status\fP { \fBAFCGI_REQUEST_COMPLETE\fP =  0, \fBAFCGI_CANT_MPX_CONN\fP =  1, \fBAFCGI_OVERLOADED\fP =  2, \fBAFCGI_UNKNOWN_ROLE\fP =  3 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBafcgi_init\fP (int maxconn, struct ev_timeout_basic_node *tm)"
.br
.ti -1c
.RI "int \fBafcgi_bind\fP (char *bind, \fBafcgi_cb\fP on_new, void *arg)"
.br
.ti -1c
.RI "void \fBafcgi_loop\fP (int loop)"
.br
.ti -1c
.RI "static void \fBafcgi_set_arg\fP (struct afcgi_sess *s, void *arg)"
.br
.ti -1c
.RI "static struct afcgi_hdr * \fBafcgi_search_header\fP (struct afcgi_sess *s, char *name)"
.br
.ti -1c
.RI "static char * \fBafcgi_search_header_str\fP (struct afcgi_sess *s, char *name)"
.br
.ti -1c
.RI "void \fBafcgi_want_write\fP (struct afcgi_sess *s)"
.br
.ti -1c
.RI "void \fBafcgi_stop_write\fP (struct afcgi_sess *s)"
.br
.ti -1c
.RI "static int \fBafcgi_write\fP (struct afcgi_sess *s, char *buff, int len)"
.br
.ti -1c
.RI "void \fBafcgi_end\fP (struct afcgi_sess *s, enum \fBafcgi_return_status\fP rs, int rc)"
.br
.ti -1c
.RI "void \fB__afcgi_logmsg\fP (int priority, const char *file, const char *function, int line, char *fmt,...)"
.br
.ti -1c
.RI "void \fBafcgi_set_log_opt\fP (uint32_t flags,...)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Define Documentation"
.PP 
.SS "#define afcgi_logmsg(priority, fmt, args...)"
.PP
\fBValue:\fP
.PP
.nf
{ \
                if ( (priority) <= AFCGI_MAX_LOG_LEVEL ) { \
                        __afcgi_logmsg((priority), \
                              __FILE__, __FUNCTION__, __LINE__, (fmt), ##args); \
                } \
        }
.fi
send log message. is recomended to use for compilation code simplification
.PP
\fBParameters:\fP
.RS 4
\fIpriority\fP log level from LOG_DEBUG to LOG_EMERG 
.br
\fIfmt\fP log format: ex: 'open file %s' 
.br
\fIargs...\fP args for log format 
.RE
.PP

.SS "#define AFCGI_MAX_LOG_LEVEL   LOG_WARNING"
.PP
all debug logs with level > AFCGI_MAX_LOG_LEVEL are not compiled redifine this define with compilation option for build binary in debug mode or in normal mode 
.SS "#define afcgi_set_callback(sess, name, cb)   afcgi_set_cb_ ## name(sess, cb)"
.PP
set callback 
.PP
\fBParameters:\fP
.RS 4
\fIsess\fP fascgi session identifier 
.br
\fIname\fP callback name 
.br
\fIcb\fP calback pointer 
.RE
.PP

.SS "#define LOG_ALERT   1"
.PP
log alert 
.SS "#define LOG_CRIT   2"
.PP
log critical 
.SS "#define LOG_DEBUG   7"
.PP
log debug 
.SS "#define LOG_EMERG   0"
.PP
log emergency 
.SS "#define LOG_ERR   3"
.PP
log error 
.SS "#define LOG_INFO   6"
.PP
log info 
.SS "#define LOG_NOTICE   5"
.PP
log notice 
.SS "#define LOG_WARNING   4"
.PP
log warning 
.SH "Typedef Documentation"
.PP 
.SS "typedef void(*) \fBafcgi_cb\fP(struct afcgi_sess *s, void *arg)"
.PP
used for standard afcgi callbacks 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP is afcgi session 
.br
\fIarg\fP is easy argument 
.RE
.PP

.SS "typedef void(*) \fBafcgi_cb_data\fP(struct afcgi_sess *s, void *arg, int len)"
.PP
used for standard afcgi input callbacks 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP is afcgi session 
.br
\fIarg\fP is easy argument 
.br
\fIlen\fP is data length 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBafcgi_callback_names\fP"
.PP
The names of the different callbacks 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fION_HEADERS \fP\fP
Called when all headers was received 
.TP
\fB\fION_RECEIVE \fP\fP
Called when STDIN stream packet was ready 
.TP
\fB\fION_DATA_RECV \fP\fP
Called when DATA stream packet was ready 
.TP
\fB\fION_RUN \fP\fP
Called when all STDIN packets was sent 
.TP
\fB\fION_END_OF_DATA \fP\fP
Called when all DATA packets was sent 
.TP
\fB\fION_WRITE \fP\fP
Called when application can write on STDIN, STDERR 
.TP
\fB\fION_ABORT \fP\fP
Called when server sent abort 
.SS "enum \fBafcgi_return_status\fP"
.PP
return status 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIAFCGI_REQUEST_COMPLETE \fP\fP
normal end of request. 
.TP
\fB\fIAFCGI_CANT_MPX_CONN \fP\fP
rejecting a new request. This happens when a Web server sends concurrent requests over one connection to an application that is designed to process one request at a time per connection. 
.TP
\fB\fIAFCGI_OVERLOADED \fP\fP
rejecting a new request. This happens when the application runs out of some resource, e.g. database connections. 
.TP
\fB\fIAFCGI_UNKNOWN_ROLE \fP\fP
rejecting a new request. This happens when the Web server has specified a role that is unknown to the application. 
.SH "Function Documentation"
.PP 
.SS "void __afcgi_logmsg (int priority, const char * file, const char * function, int line, char * fmt,  ...)"
.PP
send log message. is recomended to use macro
.PP
\fBParameters:\fP
.RS 4
\fIpriority\fP log level from LOG_DEBUG to LOG_EMERG 
.br
\fIfile\fP code filename 
.br
\fIfunction\fP code function 
.br
\fIline\fP code line 
.br
\fIfmt\fP log format: ex: 'open file %s' 
.br
\fIargs\fP args for log format 
.RE
.PP

.SS "int afcgi_bind (char * bind, \fBafcgi_cb\fP on_new, void * arg)"
.PP
Bind network address or socket 
.PP
\fBParameters:\fP
.RS 4
\fIbind\fP network address or socket (or NULL for stdin) 
.br
\fIon_new\fP callback called for new connexion 
.br
\fIarg\fP easy arg 
.RE
.PP
\fBReturns:\fP
.RS 4
if ok return 0, else return < 0 
.RE
.PP

.SS "void afcgi_end (struct afcgi_sess * s, enum \fBafcgi_return_status\fP rs, int rc)"
.PP
afcgi session end 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP afcgi session identifier 
.br
\fIrs\fP return status 
.br
\fIrc\fP return code 
.RE
.PP

.SS "void afcgi_init (int maxconn, struct ev_timeout_basic_node * tm)"
.PP
init fcgi internals and poller system 
.PP
\fBParameters:\fP
.RS 4
\fImaxconn\fP The maximun of connection expected (all sockets) -1: use the max limit (ulimit -n) >0: use this value, ans set limit 
.br
\fItm\fP The timeout tree pointer from lib events 
.RE
.PP

.SS "void afcgi_loop (int loop)"
.PP
afcgi main loop. This launched the main loop after initialization 
.PP
\fBParameters:\fP
.RS 4
\fIloop\fP (boolean) 0: the function return, 1: the function never return 
.RE
.PP

.SS "static struct afcgi_hdr* afcgi_search_header (struct afcgi_sess * s, char * name)\fC [inline, static]\fP"
.PP
search header 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP afcgi session identifier 
.br
\fIname\fP header name (case insensitive 
.RE
.PP
\fBReturns:\fP
.RS 4
header if found, NULL if not found 
.RE
.PP

.SS "static char* afcgi_search_header_str (struct afcgi_sess * s, char * name)\fC [inline, static]\fP"
.PP
search header, return string format 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP afcgi session identifier 
.br
\fIname\fP header name (case insensitive 
.RE
.PP
\fBReturns:\fP
.RS 4
char *header if found, NULL if not found 
.RE
.PP

.SS "static void afcgi_set_arg (struct afcgi_sess * s, void * arg)\fC [inline, static]\fP"
.PP
set easy argument 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP fascgi session identifier 
.br
\fIarg\fP easy argument 
.RE
.PP

.SS "void afcgi_set_log_opt (uint32_t flags,  ...)"
.PP
set log modes
.PP
\fBParameters:\fP
.RS 4
\fIflags,:\fP can takes this values:
.RE
.PP
.IP "\(bu" 2
AFCGI_LOG_STDERR log on stderr output
.IP "\(bu" 2
AFCGI_LOG_SYSLOG log on syslog, this option require 3 parameters
.IP "  \(bu" 4
(char *) program name (generally the same AFCGI_LOG_DSP_APP_NAME)
.IP "  \(bu" 4
(int) log pid ? : 1=>yes, 0=>no
.IP "  \(bu" 4
(int) the facility code:
.IP "    \(bu" 6
LOG_KERN : kernel messages
.IP "    \(bu" 6
LOG_USER : random user-level messages
.IP "    \(bu" 6
LOG_MAIL : mail system
.IP "    \(bu" 6
LOG_DAEMON : system daemons
.IP "    \(bu" 6
LOG_AUTH : security/authorization messages
.IP "    \(bu" 6
LOG_SYSLOG : messages generated internally by syslogd
.IP "    \(bu" 6
LOG_LPR : line printer subsystem
.IP "    \(bu" 6
LOG_NEWS : network news subsystem
.IP "    \(bu" 6
LOG_UUCP : UUCP subsystem
.IP "    \(bu" 6
LOG_CRON : clock daemon
.IP "    \(bu" 6
LOG_AUTHPRIV : security/authorization messages (private)
.IP "    \(bu" 6
LOG_FTP : ftp daemon
.IP "    \(bu" 6
LOG_LOCAL0 : reserved for local use
.IP "    \(bu" 6
LOG_LOCAL1 : reserved for local use
.IP "    \(bu" 6
LOG_LOCAL2 : reserved for local use
.IP "    \(bu" 6
LOG_LOCAL3 : reserved for local use
.IP "    \(bu" 6
LOG_LOCAL4 : reserved for local use
.IP "    \(bu" 6
LOG_LOCAL5 : reserved for local use
.IP "    \(bu" 6
LOG_LOCAL6 : reserved for local use
.IP "    \(bu" 6
LOG_LOCAL7 : reserved for local use
.PP

.PP

.PP
.PP
.IP "\(bu" 2
AFCGI_LOG_DSP_LOG_LEVEL display only loglevel upper than the parameter. This option require 1 parameter:
.IP "  \(bu" 4
(int) loglevel. default: LOG_WARNING
.PP

.PP
.PP
.IP "\(bu" 2
AFCGI_LOG_DSP_TIME display time in log
.IP "\(bu" 2
AFCGI_LOG_DSP_HOSTNAME display hostname in log
.IP "\(bu" 2
AFCGI_LOG_DSP_APP_NAME display application name in log. This option require 1 parameter
.IP "  \(bu" 4
(char *) application name
.PP

.PP
.PP
.IP "\(bu" 2
AFCGI_LOG_DSP_PID display application pid in log
.IP "\(bu" 2
AFCGI_LOG_DSP_FUNCTION: log msg function name (generally used for debug)
.IP "\(bu" 2
AFCGI_LOG_DSP_FILE: log msg filename (generally used for debug)
.IP "\(bu" 2
AFCGI_LOG_DSP_LINE: log msg line (generallyused for debug) 
.PP

.SS "void afcgi_stop_write (struct afcgi_sess * s)"
.PP
afcgi session do not write more 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP afcgi session identifier 
.RE
.PP

.SS "void afcgi_want_write (struct afcgi_sess * s)"
.PP
afcgi session want's write 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP afcgi session identifier 
.RE
.PP

.SS "static int afcgi_write (struct afcgi_sess * s, char * buff, int len)\fC [inline, static]\fP"
.PP
write data 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP afcgi session identifier 
.br
\fIbuff\fP buffer 
.br
\fIlen\fP buffer len 
.RE
.PP
\fBReturns:\fP
.RS 4
size writed 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for events from the source code.
